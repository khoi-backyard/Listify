//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Settings.bundle`.
    static let settingsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "Settings", pathExtension: "bundle")
    /// Resource file `success.wav`.
    static let successWav = Rswift.FileResource(bundle: R.hostingBundle, name: "success", pathExtension: "wav")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Settings", withExtension: "bundle")`
    static func settingsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.settingsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "success", withExtension: "wav")`
    static func successWav(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.successWav
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 5 images.
  struct image {
    /// Image `calendar`.
    static let calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "calendar")
    /// Image `checkmark-checked`.
    static let checkmarkChecked = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkmark-checked")
    /// Image `checkmark-unchecked`.
    static let checkmarkUnchecked = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkmark-unchecked")
    /// Image `google-logo`.
    static let googleLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "google-logo")
    /// Image `list-icon`.
    static let listIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "list-icon")
    
    /// `UIImage(named: "calendar", bundle: ..., traitCollection: ...)`
    static func calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkmark-checked", bundle: ..., traitCollection: ...)`
    static func checkmarkChecked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkmarkChecked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checkmark-unchecked", bundle: ..., traitCollection: ...)`
    static func checkmarkUnchecked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkmarkUnchecked, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "google-logo", bundle: ..., traitCollection: ...)`
    static func googleLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.googleLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "list-icon", bundle: ..., traitCollection: ...)`
    static func listIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.listIcon, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `LaunchScreen`.
    static let launchScreen = _R.nib._LaunchScreen()
    
    /// `UINib(name: "LaunchScreen", in: bundle)`
    static func launchScreen(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `taskCell`.
    static let taskCell: Rswift.ReuseIdentifier<TaskItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "taskCell")
    /// Reuse identifier `taskListsCell`.
    static let taskListsCell: Rswift.ReuseIdentifier<ListsTableViewCell> = Rswift.ReuseIdentifier(identifier: "taskListsCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `Authentication`.
    static let authentication = _R.storyboard.authentication()
    /// Storyboard `Task`.
    static let task = _R.storyboard.task()
    
    /// `UIStoryboard(name: "Authentication", bundle: ...)`
    static func authentication(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.authentication)
    }
    
    /// `UIStoryboard(name: "Task", bundle: ...)`
    static func task(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.task)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _LaunchScreen: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try authentication.validate()
      try task.validate()
    }
    
    struct authentication: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Authentication"
      
      static func validate() throws {
        if UIKit.UIImage(named: "google-logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'google-logo' is used in storyboard 'Authentication', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct task: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Task"
      let tasksViewController = StoryboardViewControllerResource<TasksViewController>(identifier: "TasksViewController")
      
      func tasksViewController(_: Void = ()) -> TasksViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tasksViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "list-icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'list-icon' is used in storyboard 'Task', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkmark-unchecked") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkmark-unchecked' is used in storyboard 'Task', but couldn't be loaded.") }
        if _R.storyboard.task().tasksViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tasksViewController' could not be loaded from storyboard 'Task' as 'TasksViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}